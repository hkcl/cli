name: tests
on:
  push:
    branches-ignore: [main]
  workflow_dispatch:

jobs:
  unit-tests:
    strategy:
      matrix:
        node_version: [lts/*, latest]
        os: [ubuntu-latest, macoswindows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
          cache: yarn
      - run: yarn install --network-timeout 600000
      - run: yarn lint
      - run: yarn build
      - run: yarn test

  publish:
    needs: [unit-tests]
    strategy:
      matrix:
        node_version: [lts/*, latest]
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
          cache: yarn
      - run: yarn install --network-timeout 600000
      - run: yarn build
      - run: yarn test:publish
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PRESERVE_ARTIFACTS: ${{ vars.PRESERVE_ARTIFACTS }}

  sf-integration:
    needs: [unit-tests]
    strategy:
      matrix:
        node_version: [lts/*, latest]
        os: [ubuntu-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
          cache: yarn
      - run: yarn install --network-timeout 600000
      - run: yarn build
      - run: yarn test:integration:sf

  win-build:
    needs: [unit-tests]
    strategy:
      matrix:
        node_version: [lts/*, latest]
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
          cache: yarn
      - run: yarn install --network-timeout 600000
      - run: yarn build
      - run: |
          sudo apt-get update
          sudo apt-get install osslsigncode nsis
      - run: yarn test:integration:win
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PRESERVE_ARTIFACTS: ${{ vars.PRESERVE_ARTIFACTS }}

  mac-build:
    needs: [unit-tests]
    strategy:
      matrix:
        node_version: [lts/*, latest]
      fail-fast: false
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
          cache: yarn
      - run: yarn install --network-timeout 600000
      - run: yarn build
      - run: yarn test:integration:macos
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PRESERVE_ARTIFACTS: ${{ vars.PRESERVE_ARTIFACTS }}

  deb-build:
    needs: [unit-tests]
    env:
      OCLIF_DEB_PRIVATE_KEY: ${{ secrets.OCLIF_DEB_PRIVATE_KEY }}
    strategy:
      matrix:
        node_version: [lts/*, latest]
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
          cache: yarn
      - run: yarn install --network-timeout 600000
      - run: yarn build
      - run: echo -n "$OCLIF_DEB_PRIVATE_KEY" | gpg --import

      - run: yarn test:integration:deb
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          OCLIF_DEB_KEY: ${{ secrets.OCLIF_DEB_KEY }}
          PRESERVE_ARTIFACTS: ${{ vars.PRESERVE_ARTIFACTS }}

